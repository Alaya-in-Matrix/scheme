(load "ch2support.scm")
(load "types.scm");;写完后这个可以去掉
(load "coercion.scm")
(load "common-define.scm")
(load "complex_package.scm")
(define (install)
;;  (install-polynomial-package)
  (install-complex-package)
  (install-real-package)
  (install-rational-package)
  (install-scheme-number-package))

(define (attach-tag type content)
  (if (number? content)
	  content
	  (cons type content)))
(define (type-tag datum)
  (cond ((pair? datum) (car datum))
		((number? datum)
		 (if (exact? datum)
		     'scheme-number
			 'real))
        (else (error "Bad typed datum -- CONTENTS" datum))))
(define (contents datum)
  (cond ((pair? datum) (cdr datum))
		((number? datum) datum)
		(else (error "Bad typed datum -- CONTENTS" datum))))


(define (add x y)
  (apply-generic 'add x y))
(define (sub x y)
  (apply-generic 'sub x y))
(define (mul x y)
  (apply-generic 'mul x y))
(define (div x y)
  (apply-generic 'div x y))
(define (=zero? x)
  (apply-generic '=zero? x))
(define (equ? x y)
  (apply-generic 'equ? x y))
(define (neg x)
  (apply-generic 'neg x))
(define (raise x)
  (apply-generic 'raise x))
(define (drop x)
  (apply-generic 'drop x))
(define (numer x)
  (apply-generic 'numer x))
(define (denom x)
  (apply-generic 'denom x))
;;=====================================
(define (real-part x)
  (apply-generic 'real-part x))
(define (imag-part x)
  (apply-generic 'imag-part x))
(define (magnitude x)
  (apply-generic 'magnitude x))
(define (angle x)
  (apply-generic 'angle x))
;;=====================================
(define (make-scheme-number n)
  ((get 'make '(scheme-number)) n))
(define (make-rational n d)
  ((get 'make '(rational)) n d))
(define (make-real r)
  ((get 'make '(real)) r))
(define (make-complex-from-real-imag x y)
  ((get 'make-complex-from-real-imag '(complex)) x y))
(define (make-complex-from-mag-ang r a)
  ((get 'make-complex-from-mag-ang '(complex)) r a))
;;=====================================
(define (install-scheme-number-package)
  (define (tag x)
	(attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)
	   (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)
	   (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)
	   (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)
	   (lambda (x y) (tag (/ x y))))
  (put 'make '(scheme-number)
	   (lambda (x) (tag x)))
  (put '=zero? '(scheme-number)
	   (lambda (x) (= x 0)))
  (put 'equ? '(scheme-number scheme-number)
	   (lambda (x y) (= x y)))
  (put 'neg '(scheme-number)
	   (lambda (x) (- x)))
  (put 'raise '(scheme-number)
	   (lambda (x)
		 (make-rational x 1)))
  'done)

(define (install-rational-package)	;;这里不采用数据导向的递归策略,我不希望(3+4i)/(5+7i)这样的存在是有理数
  ;;internal procedures
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)			;;不支持(make-rat 2.5 10)这样的构造方式
	(if (= d 0)
	    (error "denom is zero!--" n d)
	    (let ((g (abs (gcd n d)))) 
		  (cons (/ n g) (/ d g)))))
  (define (add-rat x y)
	(make-rat
	  (+ (* (numer x) (denom y))
		 (* (numer y) (denom x)))
	  (* (denom x) (denom y))))
  (define (sub-rat x y)
	(make-rat
	  (- (* (numer x) (denom y))
		 (* (numer y) (denom x)))
	  (* (denom x) (denom y))))
  (define (mul-rat x y)
	(make-rat
	  (* (numer x) (numer y))
	  (* (denom x) (denom y))))
  (define (div-rat x y)
	(make-rat 
	  (* (numer x) (denom y))
	  (* (denom x) (numer y))))
  ;; interface to rest of the system
  (define (tag x) (attach-tag 'rational x))
  (put 'numer '(rational) numer)
  (put 'denom '(rational) denom)
  (put 'add '(rational rational)
	   (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)
	   (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)
	   (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)
	   (lambda (x y) (tag (div-rat x y))))
  (put 'make '(rational)
	   (lambda (n d) (tag (make-rat n d))))
  ;;=========================================
  (put '=zero? '(rational)
	   (lambda (r) (= (numer r) 0)))
  (put 'neg '(rational)
	   (lambda (r) (tag (make-rat (* -1 (numer r)) 
								  (denom r)))))
  (put 'equ? '(rational rational)
	   (lambda (r1 r2)
		 (and (= (numer r1) (numer r2))
			  (= (denom r1) (denom r2)))))
  (put 'raise '(rational)
	   (lambda (r)
		 (make-real (/ (numer r)
					   (denom r)))))
  (put 'project '(rational)
	   (lambda (r)
		 (make-scheme-number (floor (/ (numer r) (denom r))))))
  ;;========================================
  'done)


(define (install-real-package)
  (define (tag x)
	(attach-tag 'real (exact->inexact x)))
  (put 'add '(real real)
	   (lambda (x y) (tag (+ x y))))
  (put 'sub '(real real)
	   (lambda (x y) (tag (- x y))))
  (put 'mul '(real real)
	   (lambda (x y) (tag (* x y))))
  (put 'div '(real real)
	   (lambda (x y) (tag (/ x y))))
  (put 'make '(real)
	   (lambda (x) (tag x)))
  (put '=zero? '(real)
	   (lambda (x) (= x 0)))
  (put 'equ? '(real real)
	   (lambda (x y) (= x y)))
  (put 'neg '(real)
	   (lambda (x) (- x)))
  (put 'raise '(real)
	   (lambda (x)
		 (make-complex-from-real-imag x 0)))
  (put 'project '(real)
	   (lambda (x)
		 (let ((scheme-rat (rationalize (inexact->exact x) 1/1000)))
		   (make-rational (numerator scheme-rat) (denominator scheme-rat)))))
  'done)

(define (install-complex-package)
  ;;imported procedures from rectangular and polar packages
  (install-rectangular-package)
  (install-polar-package)
  (define (make-from-real-imag x y)
	((get 'make-from-real-imag '(rectangular)) x y))
  (define (make-from-mag-ang r a)
	((get 'make-from-mag-ang '(polar)) r a))
  ;;internal procedures
  ;;接口约定各种数据以实数方式表示
  (define (add-c z1 z2)
	(make-from-real-imag (+ (real-part z1) (real-part z2))
						 (+ (imag-part z1) (imag-part z2))))
  (define (sub-c z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
						 (- (imag-part z1) (imag-part z2))))
  (define (mul-c z1 z2)
	(make-from-mag-ang (* (magnitude z1) (magnitude z2))
					   (+ (angle z1) (angle z2))))
  (define (div-c z1 z2)
	(make-from-mag-ang (/ (magnitude z1) (magnitude z2))
					   (- (angle z1) (angle z2))))
  ;;interface to rest-of system
  (define (tag z)
	(attach-tag 'complex z))
  (put 'add '(complex complex)
	   (lambda (z1 z2) (tag (add-c z1 z2))))
  (put 'sub '(complex complex)
	   (lambda (z1 z2) (tag (sub-c z1 z2))))
  (put 'mul '(complex complex)
	   (lambda (z1 z2) (tag (mul-c z1 z2))))
  (put 'div '(complex complex)
	   (lambda (z1 z2) (tag (div-c z1 z2))))
  (put 'real-part '(complex) real-part)
  (put 'imag-part '(complex) imag-part)
  (put 'magnitude '(complex) magnitude)
  (put 'angle '(complex) angle)
  (put '=zero? '(complex)
	   (lambda (z) (= 0 (magnitude z))))
  (put 'equ? '(complex complex)
	   (lambda (z1 z2)
		 (and (= (real-part z1) (real-part z2))
			  (= (imag-part z1) (imag-part z2)))))
  (put 'make-complex-from-real-imag '(complex)
	   (lambda (x y)
		 (tag (make-from-real-imag x y))))
  (put 'make-complex-from-mag-ang '(complex)
	   (lambda (r a)
		 (tag (make-from-mag-ang r a))))
  (put 'neg '(complex)
	   (lambda (z)
		 (tag (make-from-real-imag (* -1 (real-part z))
								   (* -1 (imag-part z))))))
  (put 'project '(complex)
	   (lambda (z)
		 (make-real (real-part z))))
  'done)

(define (drop x)
  (let ((project (get 'project (list (type-tag x)))))
	(if project
	    (let ((projected (project (contents x))))
		  (if (equ? x (raise projected))
			  (drop projected)
			  x))
		x)))

